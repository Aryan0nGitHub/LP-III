import heapq
from collections import defaultdict

# Create a class for the Huffman Tree Node
class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    # Define comparison operators for the priority queue (min-heap)
    def __lt__(self, other):
        return self.freq < other.freq

# Function to build the Huffman Tree
def build_huffman_tree(text):
    # Calculate frequency of each character
    freq = defaultdict(int)
    for char in text:
        freq[char] += 1
    
    # Build the priority queue (min-heap)
    heap = [Node(char, f) for char, f in freq.items()]
    heapq.heapify(heap)

    # Build the tree
    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(None, left.freq + right.freq)  # Internal node
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)

    return heap[0]  # Return the root of the Huffman Tree

# Function to generate Huffman codes from the tree
def generate_huffman_codes(root, code="", codes={}):
    if root:
        # If it's a leaf node, add the character and its code
        if root.char:
            codes[root.char] = code
        # Traverse the tree to generate codes for left and right branches
        generate_huffman_codes(root.left, code + "0", codes)
        generate_huffman_codes(root.right, code + "1", codes)
    return codes

# Function to encode text using Huffman Codes
def huffman_encoding(text):
    root = build_huffman_tree(text)
    huffman_codes = generate_huffman_codes(root)
    encoded_text = ''.join(huffman_codes[char] for char in text)
    return encoded_text, huffman_codes

# Function to decode text using Huffman Codes
def huffman_decoding(encoded_text, huffman_codes):
    reverse_codes = {v: k for k, v in huffman_codes.items()}
    current_code = ""
    decoded_text = ""

    for bit in encoded_text:
        current_code += bit
        if current_code in reverse_codes:
            decoded_text += reverse_codes[current_code]
            current_code = ""
    
    return decoded_text

# Main function to test Huffman Encoding and Decoding
def main():
    text = "this is an example for huffman encoding"
    print("Original Text:", text)

    # Huffman Encoding
    encoded_text, huffman_codes = huffman_encoding(text)
    print("\nEncoded Text:", encoded_text)
    print("Huffman Codes:", huffman_codes)

    # Huffman Decoding
    decoded_text = huffman_decoding(encoded_text, huffman_codes)
    print("\nDecoded Text:", decoded_text)

if __name__ == "__main__":
    main()
